version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.0
  maven: circleci/maven@1.4.1
executors:
  default:
    docker:
      - image: cimg/openjdk:8.0
    environment:
      AWS_REGION: us-east-1

commands:
  assume_oidc_role:
    steps:
      - aws-cli/setup:
          profile_name: default
          role_arn: arn:aws:iam::640667908132:role/CIRCLECI-OIDC-ROLE
          role_session_name: ephemeral-session
          session_duration: "1800"
          region: ${AWS_REGION}

jobs:
  build:
    executor: default
    resource_class: figs-engineering/figs-cicd
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
            - maven-repo-v1-{{ .Branch }}-
            - maven-repo-v1-
      - assume_oidc_role
      - run:
          name: setup
          command: |
            mkdir -p ~/.m2
            cp .circleci/settings.xml ~/.m2
            echo "export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain app-figs --domain-owner 640667908132 --query authorizationToken --output text)" >> $BASH_ENV
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: release
                command: |
                  export GRGIT_USER=figs-ci-bot
                  export GRGIT_PASS=$CI_BOT_GITHUB_ACCESS_TOKEN
                
                  git config --global user.name "$GRGIT_USER"
                  git config --global user.email "figs.engineering+$GRGIT_USER@wearfigs.com"
                
                  git remote rm origin
                  git remote add origin "https://figs-ci-bot:$CI_BOT_GITHUB_ACCESS_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
                
                  git fetch origin
                
                  git branch --set-upstream-to "origin/$CIRCLE_BRANCH"
                  ./mvnw -B release:prepare release:perform deploy
      - unless:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: build
                command: ./mvnw deploy
      - save_cache:
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2/repository
      - persist_to_workspace:
          root: ~/
          paths:
            - project

workflows:
  build-workflow:
    jobs:
      - build:
          context: service-common
